//Round Robin
import java.util.Scanner;  
public class RoundRobin  
{  
public static void main(String args[])  
{  
int n,i,qt,count=0,temp,sq=0,bt[],wt[],tat[],rem_bt[];  
float awt=0,atat=0;  
bt = new int[10];  
wt = new int[10];  
tat = new int[10];  
rem_bt = new int[10];  
Scanner s=new Scanner(System.in);  
System.out.print("Enter the number of process (maximum 10) = ");  
n = s.nextInt();  
System.out.print("Enter the burst time of the process\n");  
for (i=0;i<n;i++)  
{  
System.out.print("P"+i+" = ");   
bt[i] = s.nextInt();  
rem_bt[i] = bt[i];  
}  
System.out.print("Enter the quantum time: ");  
qt = s.nextInt();  
while(true)  
{  
for (i=0,count=0;i<n;i++)  
{  
temp = qt;  
if(rem_bt[i] == 0)  
{  
count++;  
continue;  
}  
if(rem_bt[i]>qt)  
rem_bt[i]= rem_bt[i] - qt;  
else  
if(rem_bt[i]>=0)  
{  
temp = rem_bt[i];  
rem_bt[i] = 0;  
}  
sq = sq + temp;  
tat[i] = sq;  
}  
if(n == count)  
break;  
}  
System.out.print("--------------------------------------------------------------------------------");  
System.out.print("\nProcess\t      Burst Time\t       Turnaround Time\t          Waiting Time\n");  
System.out.print("--------------------------------------------------------------------------------");  
for(i=0;i<n;i++)  
{  
wt[i]=tat[i]-bt[i];  
awt=awt+wt[i];  
atat=atat+tat[i];  
System.out.print("\n "+(i+1)+"\t "+bt[i]+"\t\t "+tat[i]+"\t\t "+wt[i]+"\n");  
}  
awt=awt/n;  
atat=atat/n;  
System.out.println("\nAverage waiting Time = "+awt+"\n");  
System.out.println("Average turnaround time = "+atat);  
}  
} 
//SJF
// Java program to implement Shortest Remaining Time First
// Shortest Remaining Time First (SRTF)

import java.util.*;

public class sjf {

  public static void main(String[] args) {
    int process[], bt[], wt[], tat[];
    int i, j, n, total = 0, pos, temp;
    float avg_wt, avg_tat;
    Scanner sc = new Scanner(System.in);
    System.out.print("enter the number of process: ");
    n = sc.nextInt();
    process = new int[n];
    bt = new int[n];
    wt = new int[n];
    tat = new int[n];
    System.out.println("Enter the burst time");
    for (i = 0; i < n; i++) {
      System.out.print("[p" + (i + 1) + "] : ");
      bt[i] = sc.nextInt();
      process[i] = i + 1;
    }
    for (i = 0; i < n; i++) {
      pos = i;
      for (j = i + 1; j < n; j++) {
        if (bt[j] < bt[pos]) {
          pos = j;
        }
      }
      temp = bt[i];
      bt[i] = bt[pos];
      bt[pos] = temp;
      temp = process[i];
      process[i] = process[pos];
      process[pos] = temp;
    }
    wt[0] = 0;
    for (i = 0; i < n; i++) {
      wt[i] = 0;
      for (j = 0; j < i; j++) wt[i] += bt[j];
      total += wt[i];
    }
    avg_wt = (float) total / n;
    System.out.println("Process\t" + "BT\t" + "Wt\t" + "tat");
    total = 0;
    for (i = 0; i < n; i++) {
      tat[i] = wt[i] + bt[i];
      total += tat[i];
      System.out.println(
        "p" + process[i] + "\t" + bt[i] + "\t" + wt[i] + "\t" + tat[i]
      );
    }
    avg_tat = (float) total / n;
    System.out.println("AWT : " + avg_wt);
    System.out.println("ATT : " + avg_tat);
  }
}

